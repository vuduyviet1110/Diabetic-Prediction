{"ast":null,"code":"// packages/react/slot/src/Slot.tsx\nimport * as React from \"react\";\nimport { composeRefs } from \"@radix-ui/react-compose-refs\";\nimport { Fragment, jsx } from \"react/jsx-runtime\";\nvar Slot = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    ...slotProps\n  } = props;\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n  if (slottable) {\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map(child => {\n      if (child === slottable) {\n        if (React.Children.count(newElement) > 1) return React.Children.only(null);\n        return React.isValidElement(newElement) ? newElement.props.children : null;\n      } else {\n        return child;\n      }\n    });\n    return /* @__PURE__ */jsx(SlotClone, {\n      ...slotProps,\n      ref: forwardedRef,\n      children: React.isValidElement(newElement) ? React.cloneElement(newElement, void 0, newChildren) : null\n    });\n  }\n  return /* @__PURE__ */jsx(SlotClone, {\n    ...slotProps,\n    ref: forwardedRef,\n    children\n  });\n});\nSlot.displayName = \"Slot\";\nvar SlotClone = React.forwardRef((props, forwardedRef) => {\n  const {\n    children,\n    ...slotProps\n  } = props;\n  if (React.isValidElement(children)) {\n    const childrenRef = getElementRef(children);\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      // @ts-ignore\n      ref: forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef\n    });\n  }\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\nSlotClone.displayName = \"SlotClone\";\nvar Slottable = ({\n  children\n}) => {\n  return /* @__PURE__ */jsx(Fragment, {\n    children\n  });\n};\nfunction isSlottable(child) {\n  return React.isValidElement(child) && child.type === Slottable;\n}\nfunction mergeProps(slotProps, childProps) {\n  const overrideProps = {\n    ...childProps\n  };\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      } else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    } else if (propName === \"style\") {\n      overrideProps[propName] = {\n        ...slotPropValue,\n        ...childPropValue\n      };\n    } else if (propName === \"className\") {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(\" \");\n    }\n  }\n  return {\n    ...slotProps,\n    ...overrideProps\n  };\n}\nfunction getElementRef(element) {\n  let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}\nvar Root = Slot;\nexport { Root, Slot, Slottable };","map":{"version":3,"names":["React","composeRefs","Fragment","jsx","Slot","forwardRef","props","forwardedRef","children","slotProps","childrenArray","Children","toArray","slottable","find","isSlottable","newElement","newChildren","map","child","count","only","isValidElement","SlotClone","ref","cloneElement","displayName","childrenRef","getElementRef","mergeProps","Slottable","type","childProps","overrideProps","propName","slotPropValue","childPropValue","isHandler","test","args","filter","Boolean","join","element","getter","Object","getOwnPropertyDescriptor","get","mayWarn","isReactWarning","Root"],"sources":["E:\\LearnSpace\\ProgrammingLang\\back_end\\python\\Diabities_Prediction_DecisionTree\\front_end\\node_modules\\@radix-ui\\react-slot\\src\\Slot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childrenArray = React.Children.toArray(children);\n  const slottable = childrenArray.find(isSlottable);\n\n  if (slottable) {\n    // the new element to render is the one passed as a child of `Slottable`\n    const newElement = slottable.props.children as React.ReactNode;\n\n    const newChildren = childrenArray.map((child) => {\n      if (child === slottable) {\n        // because the new element will be the one rendered, we are only interested\n        // in grabbing its children (`newElement.props.children`)\n        if (React.Children.count(newElement) > 1) return React.Children.only(null);\n        return React.isValidElement(newElement)\n          ? (newElement.props.children as React.ReactNode)\n          : null;\n      } else {\n        return child;\n      }\n    });\n\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {React.isValidElement(newElement)\n          ? React.cloneElement(newElement, undefined, newChildren)\n          : null}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    const childrenRef = getElementRef(children);\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      // @ts-ignore\n      ref: forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef,\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      // if the handler exists on both, we compose them\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args: unknown[]) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      }\n      // but if it exists only on the slot, we use only this one\n      else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\n// Before React 19 accessing `element.props.ref` will throw a warning and suggest using `element.ref`\n// After React 19 accessing `element.ref` does the opposite.\n// https://github.com/facebook/react/pull/28348\n//\n// Access the ref using the method that doesn't yield a warning.\nfunction getElementRef(element: React.ReactElement) {\n  // React <=18 in DEV\n  let getter = Object.getOwnPropertyDescriptor(element.props, 'ref')?.get;\n  let mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return (element as any).ref;\n  }\n\n  // React 19 in DEV\n  getter = Object.getOwnPropertyDescriptor(element, 'ref')?.get;\n  mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n\n  // Not DEV\n  return element.props.ref || (element as any).ref;\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}